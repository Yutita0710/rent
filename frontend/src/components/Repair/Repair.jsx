import { useState, useContext, useEffect } from "react";
import { Container, Card, Table, Button, Form, Modal, OverlayTrigger, Tooltip, Row, Col } from "react-bootstrap";
import { AuthContext } from "../../context/authContext";
import Navbar from "../Navbar/Navbar";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";

function Repair() {
  const { token } = useContext(AuthContext);
  const [returnList, setReturnList] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [selectedItem, setSelectedItem] = useState(null);
  const [repairQuantity, setRepairQuantity] = useState(0);
  const [repairComment, setRepairComment] = useState("");

  // const fetchCategories = async () => {
  //   const response = await axios.get("http://localhost:3001/categories");
  //   setCategories(response.data);
  // };

  const fetchReturnDetail = () => {
    const url = "http://localhost:3001/return-detail";
    // console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ:", url);
    axios
      .get(url, {
        headers: { Authorization: token },
      })
      .then((res) => setReturnList(res.data))
      .catch((err) => console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err));
  };
  useEffect(() => {
    fetchReturnDetail();
  }, []);
  const damagedReturns = returnList
    .filter((item) => item.status_name === "‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß/‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î" || item.status_name === "‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö/‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∏‡∏î")
    .sort((a, b) => {
      if (a.returned_damaged === 0 && b.returned_damaged !== 0) return 1;
      if (a.returned_damaged !== 0 && b.returned_damaged === 0) return -1;
      const dateA = new Date(a.return_date);
      const dateB = new Date(b.return_date);
      return dateB - dateA;
    });

  console.log(damagedReturns);

  const handleShowModal = (item) => {
    setSelectedItem(item);
    setShowModal(true);
  };

  const handleUpdateRepair = async () => {
    if (!selectedItem) return;
    if (!repairQuantity || !repairComment) {
      Swal.fire({
        icon: "warning",
        title: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö",
        text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á",
        confirmButtonColor: "#2e7d32",
      });
      return;
    }
    try {
      await axios.put(`http://localhost:3001/repair/${selectedItem.return_id}`, {
        repaired_quantity: repairQuantity,
        repair_note: repairComment,
        product_id: selectedItem.product_id,
      });

      Swal.fire("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success");
      setShowModal(false);
      fetchReturnDetail(); // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    } catch (err) {
      Swal.fire("‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", err.message, "error");
    }
  };
  return (
    <div className="d-flex flex-column flex-lg-row">
      <Navbar />
      <Container
        className="py-4"
        style={{
          backgroundColor: "#F5F5F5",
          minHeight: "100vh",
          marginTop: "80px",
        }}
      >
        <Card>
          <Card.Body>
            <h4 className="text-center mb-3" style={{ color: "#2e7d32" }}>
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∏‡∏î/‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
            </h4>

            <div className="d-flex align-items-center flex-wrap gap-3 mb-3">
              <Form.Group controlId="search" style={{ maxWidth: "400px" }}>
                <Form.Control
                  type="text"
                  placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ..."
                  className="form-control"
                  style={{ width: "350px" }}
                  onChange={(e) => {
                    setSearch(e.target.value); // ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® useState ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö search
                  }}
                />
              </Form.Group>
            </div>

            <Table striped bordered hover responsive>
              <thead>
                <tr>
                  <th>‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                  <th>‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏î‡∏µ</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏≥‡∏£‡∏∏‡∏î</th>
                  <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢</th>
                  <th>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏</th>
                  <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°</th>
                  <th>‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏î‡∏¢</th>
                  <th>‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢</th>
                  <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                  <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                </tr>
              </thead>
              <tbody>
                {damagedReturns.map((item, index) => (
                  <tr key={item.return_id}>
                    <td>{index + 1}</td>
                    <td>{item.product_name}</td>
                    <td>{item.returned_good}</td>
                    <td>{item.returned_damaged}</td>
                    <td>{item.returned_lost}</td>
                    <td>{item.note || "-"}</td>
                    <td>{item.repair_note || "-"}</td>
                    <td>{item.returned_by_name}</td>
                    <td>{item.received_by_name}</td>
                    {item.returned_damaged === 0 ? (
                      <>
                        <td>‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß</td>
                        <td>
                          <Button variant="warning" disabled onClick={() => handleShowModal(item)}>
                            ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                          </Button>
                        </td>
                      </>
                    ) : (
                      <>
                        <td>{item.status_name}</td>
                        <td>
                          <Button variant="warning" onClick={() => handleShowModal(item)}>
                            ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                          </Button>
                        </td>
                      </>
                    )}
                  </tr>
                ))}
              </tbody>
            </Table>
          </Card.Body>
        </Card>
      </Container>

      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedItem && (
            <>
              <p>
                <strong>‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô:</strong> {selectedItem.product_name}
              </p>
              <p>
                <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏≥‡∏£‡∏∏‡∏î:</strong> {selectedItem.returned_damaged}
              </p>
              <p>
                <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> {selectedItem.note || "-"}
              </p>
              <p>
                <strong>‡∏Ñ‡∏∑‡∏ô‡πÇ‡∏î‡∏¢:</strong> {selectedItem.returned_by_name}
              </p>
              <p>
                <strong>‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢:</strong> {selectedItem.received_by_name}
              </p>
              <Form.Group className="mb-3">
                <Form.Label>
                  <strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à</strong>
                </Form.Label>
                <Form.Control
                  type="number"
                  name="quantity"
                  min="1"
                  max={selectedItem.returned_damaged || 1}
                  value={repairQuantity}
                  onChange={(e) => {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô max ‡πÅ‡∏•‡∏∞ min
                    let value = e.target.value;
                    if (value < 1) value = 1;
                    if (value > (selectedItem.returned_damaged || 1)) value = selectedItem.returned_damaged || 1;

                    setRepairQuantity(value); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                  }}
                />
                <Form.Text muted>‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {selectedItem.returned_damaged || 0} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</Form.Text>
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>
                  <strong>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°</strong>
                </Form.Label>
                <Form.Control type="text" placeholder="‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°" required onChange={(e) => setRepairComment(e.target.value)} />
              </Form.Group>
              {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ */}
            </>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            ‡∏õ‡∏¥‡∏î
          </Button>
          <Button variant="success" onClick={handleUpdateRepair}>
            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          </Button>
          {/* ‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô ‡πÜ */}
        </Modal.Footer>
      </Modal>
    </div>
  );
}

export default Repair;
