import { useState, useContext, useEffect } from "react";
import { Container, Card, Table, Form, Button, Row, Col, Modal } from "react-bootstrap";
import { AuthContext } from "../../context/authContext";
import Navbar from "../Navbar/Navbar";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { FaTools, FaCheckCircle, FaHourglassHalf } from "react-icons/fa";
const apiUrl = import.meta.env.VITE_API_URL;

function Maintenance() {
  const [history, setHistory] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 10;
  const [showModal, setShowModal] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [repairData, setRepairData] = useState({ responsible_person: "", cost: "", repair_date: "" });

  const auth = useContext(AuthContext);
  const navigate = useNavigate();
  const { user } = auth;

  useEffect(() => {
    if (!user) return;
    fetchMaintenance();
  }, [auth]);

  const fetchMaintenance = () => {
    axios.get(`${apiUrl}/maintenance-record`).then((response) => {
      setHistory(response.data);
    });
  };

  const updateStatus = (id, status_name) => {
    axios.put(`${apiUrl}/maintenance-record/${id}`, { status_name }).then(() => {
      fetchMaintenance();
    });
  };

  const handleSaveRepair = () => {
    axios.put(`${apiUrl}/maintenance/update-repair/${selectedRecord.record_id}`, repairData)
      .then(() => {
        setShowModal(false);
        setRepairData({ responsible_person: "", cost: "", repair_date: "" });
        fetchMaintenance();
      });
  };

  const DateComponent = ({ dateString }) => {
    const formattedDate = new Date(dateString).toLocaleDateString("th-TH");
    return formattedDate;
  };

  const filteredData = history.filter((item) => {
    const fullName =
      item.full_name && item.full_name.trim() !== ""
        ? item.full_name
        : `${item.frist_name || ""} ${item.last_name || ""}`;
  
    const matchesSearch =
      item.name?.toLowerCase().includes(search.toLowerCase()) ||
      fullName.toLowerCase().includes(search.toLowerCase());
  
    const matchesStatus = filter === "" || item.status_name === filter;
  
    return matchesSearch && matchesStatus;
  });

  const paginatedData = filteredData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);
  const totalPages = Math.ceil(filteredData.length / itemsPerPage);

  const statusOptions = ["‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"];

  const statusIcon = (status) => {
    if (status === "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") return <FaHourglassHalf color="orange" />;
    if (status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£") return <FaTools color="blue" />;
    if (status === "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô") return <FaCheckCircle color="green" />;
  };

  return (
    <div className="d-flex flex-column flex-lg-row">
      <Navbar />
      <Container className="py-4" style={{ backgroundColor: "#F5F5F5", minHeight: "100vh", marginTop: "80px" }}>
        <Card className="p-4 w-100">
          <h4 className="text-center mb-4" style={{ color: "#2e7d32" }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô</h4>

          <Row className="mb-3">
            <Col md={6}>
              <Form.Control
                type="text"
                placeholder="üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô..."
                value={search}
                style={{ width: "360px" }}
                onChange={(e) => setSearch(e.target.value)}
              />
            </Col>
            <Col md={6} className="d-flex justify-content-end">
              <Form.Select
                value={filter}
                onChange={(e) => setFilter(e.target.value)}
                style={{ width: "250px" }}
              >
                <option value="">-- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ --</option>
                {statusOptions.map((status, idx) => (
                  <option key={idx} value={status}>{status}</option>
                ))}
              </Form.Select>
            </Col>
          </Row>

          <Table striped bordered hover responsive>
            <thead>
              <tr>
                <th>‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á</th>
                <th>‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</th>
                <th>‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°</th>
                <th>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</th>
                <th>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</th>
                <th>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</th>
                <th>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</th>
                <th>‡∏ß‡∏±‡∏ô‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à</th>
                <th>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
              </tr>
            </thead>
            <tbody>
              {paginatedData.map((record) => (
                <tr key={record.record_id}>
                  <td>{record.record_id}</td>
                  <td>
                    {record.full_name && record.full_name.trim() !== ""
                      ? record.full_name
                      : `${record.frist_name || ""} ${record.last_name || ""}`.trim() || "-"}
                  </td>
                  <td>{record.name}</td>
                  <td><DateComponent dateString={record.maintenance_date} /></td>
                  <td>{record.description}</td>
                  <td>{statusIcon(record.status_name)} {record.status_name}</td>
                  <td>{record.responsible_person || "-"}</td>
                  <td>{record.cost || "-"}</td>
                  <td>{record.repair_date ? <DateComponent dateString={record.repair_date} /> : "-"}</td>
                  <td>
                    {record.status_name === "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥" && (
                      <Button variant="success" className="w-100 my-1" onClick={() => updateStatus(record.record_id, "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£")}>
                        ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                      </Button>
                    )}
                    {record.status_name === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" && (
                      <Button variant="info" className="w-100 my-1" onClick={() => { setShowModal(true); setSelectedRecord(record); }}>
                        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ã‡πà‡∏≠‡∏°
                      </Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>

          {/* Pagination ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç */}
          <div className="d-flex justify-content-center mt-3">
            {Array.from({ length: totalPages }, (_, i) => (
              <Button
                key={i + 1}
                variant={currentPage === i + 1 ? "primary" : "outline-secondary"}
                className="mx-1"
                onClick={() => setCurrentPage(i + 1)}
              >
                {i + 1}
              </Button>
            ))}
          </div>
        </Card>

        {/* Modal ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ã‡πà‡∏≠‡∏° */}
        <Modal show={showModal} onHide={() => setShowModal(false)} centered>
          <Modal.Header closeButton><Modal.Title>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°</Modal.Title></Modal.Header>
          <Modal.Body>
            <Form>
              <Form.Group className="mb-3">
                <Form.Label>‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö</Form.Label>
                <Form.Control type="text" value={repairData.responsible_person} onChange={(e) => setRepairData({ ...repairData, responsible_person: e.target.value })} />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢</Form.Label>
                <Form.Control type="number" value={repairData.cost} onChange={(e) => setRepairData({ ...repairData, cost: e.target.value })} />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à</Form.Label>
                <Form.Control type="date" value={repairData.repair_date} onChange={(e) => setRepairData({ ...repairData, repair_date: e.target.value })} />
              </Form.Group>
            </Form>
          </Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={() => setShowModal(false)}>‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</Button>
            <Button variant="primary" onClick={handleSaveRepair}>‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</Button>
          </Modal.Footer>
        </Modal>
      </Container>
    </div>
  );
}

export default Maintenance;
